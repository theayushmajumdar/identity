var ScrollReveal = function () {
    "use strict";
    var defaults = {
        delay: 0,
        distance: "0",
        duration: 600,
        easing: "cubic-bezier(0.5, 0, 0, 1)",
        interval: 0,
        opacity: 0,
        origin: "bottom",
        rotate: { x: 0, y: 0, z: 0 },
        scale: 1,
        cleanup: true,
        container: document.documentElement,
        desktop: true,
        mobile: true,
        reset: false,
        useDelay: "always",
        viewFactor: 0,
        viewOffset: { top: 0, right: 0, bottom: 0, left: 0 },
        afterReset: function () {},
        afterReveal: function () {},
        beforeReset: function () {},
        beforeReveal: function () {}
    };

    var noopMethods = {
        clean: function () {},
        destroy: function () {},
        reveal: function () {},
        sync: function () {},
        get noop() { return true; }
    };

    function isNode(obj) {
        return typeof window.Node === "object" ? obj instanceof window.Node : (obj !== null && typeof obj === "object" && typeof obj.nodeType === "number" && typeof obj.nodeName === "string");
    }

    function toArray(obj, context) {
        if (context === void 0) { context = document; }
        if (obj instanceof Array) return obj.filter(isNode);
        if (isNode(obj)) return [obj];
        if (typeof obj === "string") {
            try {
                var nodeList = context.querySelectorAll(obj);
                return Array.prototype.slice.call(nodeList);
            } catch (e) {
                return [];
            }
        }
        return [];
    }

    function isObject(obj) {
        return obj !== null && typeof obj === "object" && (obj.constructor === Object || Object.prototype.toString.call(obj) === "[object Object]");
    }

    function forEach(obj, callback) {
        if (isObject(obj)) {
            return Object.keys(obj).forEach(function (key) {
                return callback(obj[key], key, obj);
            });
        }
        if (obj instanceof Array) {
            return obj.forEach(function (item, index) {
                return callback(item, index, obj);
            });
        }
        throw new TypeError("Expected either an array or object literal.");
    }

    function log(message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.constructor.debug && console) {
            var logMessage = "%cScrollReveal: " + message;
            args.forEach(function (arg) {
                return logMessage += "\n â€” " + arg;
            });
            console.log(logMessage, "color: #ea654b;");
        }
    }

    function cleanup() {
        var _this = this;
        try {
            toArray("[data-sr-id]").forEach(function (element) {
                var id = parseInt(element.getAttribute("data-sr-id"));
                _this.store.elements[id] && delete _this.store.elements[id];
            });
            this.sync();
        } catch (e) {
            return log.call(this, "Clean failed.", e.message);
        }
    }

    function toMatrix(array) {
        if (array.constructor === Array) {
            if (array.length === 16) return array;
            if (array.length === 6) {
                var matrix = defaultMatrix();
                matrix[0] = array[0];
                matrix[1] = array[1];
                matrix[4] = array[2];
                matrix[5] = array[3];
                matrix[12] = array[4];
                matrix[13] = array[5];
                return matrix;
            }
        }
        throw new RangeError("Expected array with either 6 or 16 values.");
    }

    function defaultMatrix() {
        var matrix = [];
        for (var i = 0; i < 16; i++) {
            matrix.push(i % 5 === 0 ? 1 : 0);
        }
        return matrix;
    }

    function multiplyMatrices(a, b) {
        var result = [];
        for (var i = 0; i < 4; i++) {
            for (var j = 0; j < 4; j++) {
                var sum = 0;
                for (var k = 0; k < 4; k++) {
                    sum += a[i + k * 4] * b[k + j * 4];
                }
                result[i + j * 4] = sum;
            }
        }
        return result;
    }

    function scaleMatrix(scaleX, scaleY) {
        var matrix = defaultMatrix();
        matrix[0] = scaleX;
        matrix[5] = typeof scaleY === "number" ? scaleY : scaleX;
        return matrix;
    }

    var Styles = function () {
        var cache = {};

        function getVendorPrefix(property) {
            if (property && typeof property === "string") {
                if (cache[property]) return cache[property];
                if (typeof document.documentElement.style[property] === "string") return cache[property] = property;
                if (typeof document.documentElement.style["-webkit-" + property] === "string") return cache[property] = "-webkit-" + property;
                throw new RangeError('Unable to find "' + property + '" style property.');
            }
            throw new TypeError("Expected a string.");
        }

        getVendorPrefix.clearCache = function () {
            cache = {};
        };

        return getVendorPrefix;
    }();

    function calculateStyles(element) {
        var computedStyles = window.getComputedStyle(element.node);
        var position = computedStyles.position;
        var config = element.config;
        var styles = {};
        var inlineStyles = (element.node.getAttribute("style") || "").match(/[\w-]+\s*:\s*[^;]+\s*/gi) || [];

        styles.computed = inlineStyles ? inlineStyles.map(function (style) {
            return style.trim();
        }).join("; ") + ";" : "";
        styles.generated = inlineStyles.some(function (style) {
            return style.match(/visibility\s?:\s?visible/i);
        }) ? styles.computed : inlineStyles.concat(["visibility: visible"]).map(function (style) {
            return style.trim();
        }).join("; ") + ";";

        var computedOpacity = parseFloat(computedStyles.opacity);
        var configOpacity = isNaN(parseFloat(config.opacity)) ? parseFloat(computedStyles.opacity) : parseFloat(config.opacity);
        var opacityStyles = {
            computed: computedOpacity !== configOpacity ? "opacity: " + computedOpacity + ";" : "",
            generated: computedOpacity !== configOpacity ? "opacity: " + configOpacity + ";" : ""
        };

        var transformStyles = [];
        var scale = config.scale;
        if (parseFloat(config.distance)) {
            var origin = config.origin;
            var distance = config.distance;

            if (origin === "top" || origin === "bottom") {
                distance = /^-/.test(distance) ? distance.substr(1) : "-" + distance;
            }

            transformStyles.push("translate3d(" + (origin === "left" || origin === "right" ? "0," + distance + ",0" : distance + ",0") + ")");
        }

        if (config.rotate.x) transformStyles.push("rotateX(" + config.rotate.x + "deg)");
        if (config.rotate.y) transformStyles.push("rotateY(" + config.rotate.y + "deg)");
        if (config.rotate.z) transformStyles.push("rotate(" + config.rotate.z + "deg)");
        if (config.scale) transformStyles.push("scale(" + config.scale + ")");
        if (config.opacity < 1) transformStyles.push("opacity: 0;");
        if (transformStyles.length) {
            var transformFunction = "transform: " + transformStyles.join(" ") + ";";
            styles.computed += transformFunction;
            styles.generated += transformFunction;
        }

        styles.vendorPrefix = Styles("transform");

        return Object.assign(styles, opacityStyles);
    }

    function setRevealStyle(element, config) {
        var style = calculateStyles(element);
        var node = element.node;
        var delay = config.delay;
        var duration = config.duration;
        var interval = config.interval;
        var easing = config.easing;
        var cleanup = config.cleanup;
        var origin = config.origin;
        var scale = config.scale;

        if (element.styles) {
            if (element.styles.computed === style.computed) return;
            if (!cleanup) {
                node.setAttribute("style", style.generated);
                return;
            }
        }

        var id = element.id;
        var units = /s$|ms$/.test(duration) ? "" : "ms";
        var transformDuration = duration * scale + units;
        var transformDelay = delay * -1 * scale + units;

        var transitionProperty = "opacity, transform";
        var transitionTimingFunction = easing;
        var transitionDuration = transformDuration + ", " + transformDuration;
        var transitionDelay = transformDelay + ", " + transformDelay;

        var styles = style.computed + "visibility: visible;" + style.vendorPrefix + "transition-property: " + transitionProperty + ";" + style.vendorPrefix + "transition-timing-function: " + transitionTimingFunction + ";" + style.vendorPrefix + "transition-duration: " + transitionDuration + ";" + style.vendorPrefix + "transition-delay: " + transitionDelay + ";";

        if (cleanup) {
            setTimeout(function () {
                node.setAttribute("style", styles);
            }, interval * id + delay);
        } else {
            node.setAttribute("style", styles);
        }

        element.styles = style;
    }

    function sync() {
        var _this = this;
        try {
            forEach(this.store.elements, function (element) {
                return setRevealStyle.call(_this, element, _this.defaults);
            });
        } catch (e) {
            return log.call(this, "Sync failed.", e.message);
        }
    }

    function ScrollReveal(config) {
        var _this = this;
        this.store = { elements: {}, containers: [document.documentElement] };
        this.defaults = Object.assign({}, defaults, config);
        this.debug = this.defaults.debug;
        this.version = "4.0.7";
        this.isSupported = (/^((?!chrome|android).)*safari/i.test(navigator.userAgent) || !/Mobi|Tablet|iPad|iPhone|Android/.test(navigator.userAgent)) && typeof document.querySelectorAll === "function" && typeof window.SVGElement === "function";
        if (!this.isSupported) return log.call(this, "This browser is not supported.");
        if (!this.defaults.mobile && /Mobi|Tablet|iPad|iPhone|Android/.test(navigator.userAgent)) return log.call(this, "Mobile devices are disabled.");
        this.init();
        setTimeout(function () {
            return _this.sync();
        });
        setTimeout(function () {
            return _this.sync();
        }, 1500);
    }

    ScrollReveal.prototype.init = function () {
        var _this = this;
        try {
            forEach(this.store.containers, function (container) {
                container.addEventListener("scroll", function () {
                    return _this.sync();
                });
            });
            window.addEventListener("resize", function () {
                return _this.sync();
            });
        } catch (e) {
            return log.call(this, "Initialization failed.", e.message);
        }
    };

    ScrollReveal.prototype.cleanup = cleanup;
    ScrollReveal.prototype.destroy = noopMethods.destroy;
    ScrollReveal.prototype.reveal = noopMethods.reveal;
    ScrollReveal.prototype.sync = sync;

    Object.defineProperties(ScrollReveal.prototype, noopMethods);

    return ScrollReveal;
}();
